# -*- coding: utf-8 -*-
"""Engg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16trTOIbiTad6yZHnTQZEQQVj3E3aUny2
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
import numpy as np
df = pd.read_csv('engineering_college_leads.csv')
df['converted'] = df['converted'].astype(str).str.strip().str.lower()
df['converted'] = df['converted'].map({'yes': 1, 'no': 0})
df = df[df['converted'].notnull()]  # keep only valid ones
df['counselling_done'] = df['counselling_done'].astype(str).str.strip().str.lower()
df['counselling_done'] = df['counselling_done'].map({'yes': 1, 'no': 0})
df['jee_main_appeared'] = df['jee_main_appeared'].astype(str).str.strip().str.lower()
df['jee_main_appeared'] = df['jee_main_appeared'].map({'yes': 1, 'no': 0})
df['scholarship_required'] = df['scholarship_required'].astype(str).str.strip().str.lower()
df['scholarship_required'] = df['scholarship_required'].map({'yes': 1, 'no': 0})
#df['counselling_done'].fillna(0, inplace=True)
label_cols = ['district', '12th_percentage', 'pcm_score', 'preferred_branch', 'scholarship_required','source','follow_up_count']
for col in label_cols:
    if df[col].dtype == 'object':
        df[col] = df[col].astype(str).str.strip().str.lower()  # clean strings
        df[col] = LabelEncoder().fit_transform(df[col])
X = df.drop(['lead_id', 'name', 'converted'], axis=1)
y = df['converted']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
lr_model = LogisticRegression(max_iter=1000, class_weight='balanced')
lr_model.fit(X_train, y_train)
print("‚úÖ Model trained successfully!")

y_pred = lr_model.predict(X_test)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Accuracy
print("Accuracy:", accuracy_score(y_test, y_pred))

# Confusion Matrix
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Classification Report
print("Classification Report:\n", classification_report(y_test, y_pred))

from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(random_state=42, class_weight='balanced')
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

print("Accuracy:", accuracy_score(y_test, y_pred_rf))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rf))
print("Classification Report:\n", classification_report(y_test, y_pred_rf))



pd.DataFrame({
    "Actual": y_test.values,
    "Predicted": y_pred_rf
}).head(10)

import matplotlib.pyplot as plt

feature_importance = rf_model.feature_importances_
features = X.columns



plt.figure(figsize=(8, 8))
plt.pie(feature_importance, labels=features, autopct='%1.1f%%', startangle=140)
plt.title("Feature Importance (Pie Chart)")
plt.tight_layout()
plt.show()
import joblib

# Save model
joblib.dump(rf_model, 'model.sav')

#pip install streamlit

import streamlit as st
import pandas as pd
from prediction import predict

st.set_page_config(page_title="Admission Predictor", layout="centered")

st.title("üéì Engineering College Admission Predictor")
st.markdown("Enter Student Details To Predict Likelihood Of Admission.")

# --- Input Form ---
district = st.selectbox("District", ['ludhiana', 'jalandhar', 'amritsar', 'patiala', 'bathinda'])
percent_12 = st.slider("12th Board %", min_value=50, max_value=100, value=75)
pcm_score = st.slider("PCM Score (out of 300)", 120, 300, 240)
jee_main = st.selectbox("Appeared in JEE Main?", ['yes', 'no'])
jee_score = st.slider("JEE Main Score", 0, 100, 70)
branch = st.selectbox("Preferred Branch", ['cse', 'ece', 'me', 'civil', 'ee'])
scholarship = st.radio("Scholarship Required?", ['yes', 'no'])
source = st.selectbox("Lead Source", ['website', 'walk-in', 'referral', 'school visit'])
counselling_done = st.radio("Counselling Done?", ['yes', 'no'])
follow_ups = st.slider("Number of Follow-ups", 0, 5, 2)

# --- Prepare input data ---
# --- Prepare input data ---
input_data = pd.DataFrame([{
    'district': district.lower(),
    '12th_percentage': percent_12,
    'pcm_score': pcm_score,
    'jee_main_appeared': jee_main.lower(),
    'jee_score': jee_score,
    'preferred_branch': branch.lower(),
    'scholarship_required': scholarship.lower(),
    'source': source.lower(),
    'counselling_done': counselling_done.lower(),
    'follow_up_count': follow_ups
}])

# --- Encode binary yes/no fields ---
binary_map = {'yes': 1, 'no': 0}
input_data['jee_main_appeared'] = input_data['jee_main_appeared'].map(binary_map)
input_data['counselling_done'] = input_data['counselling_done'].map(binary_map)
input_data['scholarship_required'] = input_data['scholarship_required'].map(binary_map)

# --- Encode other categorical features ---
from sklearn.preprocessing import LabelEncoder

label_maps = {
    'district': ['ludhiana', 'jalandhar', 'amritsar', 'patiala', 'bathinda'],
    'preferred_branch': ['cse', 'ece', 'me', 'civil', 'ee'],
    'source': ['website', 'walk-in', 'referral', 'school visit']
}

for col, categories in label_maps.items():
    le = LabelEncoder()
    le.fit(categories)
    input_data[col] = le.transform(input_data[col])

# --- Prediction ---
if st.button("Predict Admission Chance"):
    prediction = predict(input_data)[0]

    # If you want probability too
    prob = rf_model.predict_proba(input_data)[0][1] * 100  # Assuming predict_proba() is defined
    prediction = 1 if prob > 70 else 0
    if prediction == 1:
        st.success(f"‚úÖ Likely to Convert (Confidence: {prob:.2f}%)")
    else:
        st.error(f"‚ùå Not Likely to Convert (Confidence: {prob:.2f}%)")

#pip install mysql-connector-python



if st.button("Save To Database"):
  import mysql.connector
  import streamlit as st

  try:
    # ‚úÖ Connect to MySQL using Streamlit secrets
    conn = mysql.connector.connect(
        host=st.secrets["mysql"]["host"],
        user=st.secrets["mysql"]["user"],
        password=st.secrets["mysql"]["password"],
        database=st.secrets["mysql"]["database"]
    )
    cursor = conn.cursor()

    # ‚úÖ Convert input_data DataFrame to a tuple
    data_tuple = tuple(input_data.iloc[0])

    # ‚úÖ Proper INSERT query (not commented)
    insert_query = """
        INSERT INTO leads_data (
            district, `12th_percentage`, pcm_score, jee_main_appeared, jee_score,
            preferred_branch, scholarship_required, source, counselling_done, follow_up_count
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """

    # ‚úÖ Execute query
    cursor.execute(insert_query, data_tuple)
    conn.commit()

    st.success("‚úÖ Lead saved to database!")

  except Exception as e:
    st.error(f"‚ùå Error saving to DB: {e}")

  finally:
    cursor.close()
    conn.close()